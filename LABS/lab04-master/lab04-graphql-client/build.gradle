plugins {
	id "java"
	id "com.apollographql.apollo3" version "3.1.0"
}

apollo {
	packageName.set("graphql")
}

repositories {
	mavenCentral()
}

dependencies {
	implementation group: 'com.apollographql.apollo3', name: 'apollo-runtime', version: '3.1.0'
	implementation group: 'com.apollographql.apollo3', name: 'apollo-rx3-support', version: '3.1.0'

	def junitVer = '5.8.2'
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVer
	testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVer
	testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
}

test {
	useJUnitPlatform()

	// only run tests if we explicitly run the 'tests' task
	onlyIf { project.gradle.startParameter.taskNames.contains("test") }
}

sourceSets {
	graphql {
		resources {
			srcDirs = ['src/main/graphql']
		}
		java{
			srcDirs = []
		}
	}
}


/* convenience tasks */

tasks.register("createMissingSourceDirs") {
	group = "Directories"
	description = "Create all of the missing source directories for this project."
	doFirst {
		sourceSets.each { def sourceRoot ->
			sourceRoot.allSource.srcDirTrees.each { def sourceDir ->
				if(!sourceDir.dir.exists()) {
					println "Creating ${sourceDir}"
					mkdir sourceDir.dir
				}
			}
		}
	}
}

tasks.register("deleteEmptySourceDirs") {
	group = "Directories"
	description = "Delete all empty source directories."
	doFirst {
		sourceSets.each { def sourceRoot ->
			sourceRoot.allSource.srcDirTrees.each { def sourceDir ->
				if(sourceDir.dir.exists() && sourceDir.dir.isDirectory() && sourceDir.dir.list().length == 0) {
					println "Removing empty ${sourceDir}"
					sourceDir.dir.delete()
				}
			}
		}
	}
}

tasks.register("openProjectDir") {
	group = "Directories"
	description = "Open the project root in the system file manager."
	doFirst {
		println('Opening: ' + file(projectDir))
		java.awt.Desktop.getDesktop().open(file(projectDir));
	}
}

def gitIgnored="""
.gradle
.nb-gradle
.classpath
.project
build
bin
dist
*.zip
*.tgz
*.class
.DS_Store
"""

tasks.register("createGitIgnore") {
	group = "Git"
	description = "Create the project's .gitignore file."
	doLast {
		def file = new File(projectDir, ".gitignore")
		if ( !file.exists() ) {
			println('Creating .gitignore')
			file.text = gitIgnored
		} else {
			println('.gitignore already exists')
		}
	}
}
