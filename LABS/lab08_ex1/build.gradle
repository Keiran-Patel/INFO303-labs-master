plugins {
	id 'application'
}

mainClassName="SetTheMainClassNameInTheBuildGradleFile"

repositories {
	mavenCentral()
}

configurations {
	// using the slf4j to unify the logging, so prevent clogging from being used
	all*.exclude module:'commons-logging'
}

dependencies {
	def camelVer = '3.16.0'
	def activeMqVer = '5.17.0'
	def slf4jVer = '1.7.36'
	def logbackVer = '1.2.11'


	// Camel core (meta-package that includes most of the useful stuff)
	implementation group: 'org.apache.camel', name: 'camel-core', version: camelVer

	// Camel JMS support
	implementation group: 'org.apache.camel', name: 'camel-jms', version: camelVer
	implementation group: 'org.apache.camel', name: 'camel-activemq', version: camelVer

	// Camel JSON support (via GSON)
	implementation group: 'org.apache.camel', name: 'camel-gson', version: camelVer

	// Camel Jetty support
	implementation group: 'org.apache.camel', name: 'camel-jetty', version: camelVer

	// Camel HTTP client support (for REST services)
	implementation group: 'org.apache.camel', name: 'camel-http', version: camelVer

	// Camel JsonPath
	implementation group: 'org.apache.camel', name: 'camel-jsonpath', version: camelVer

	// logging
	implementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVer
	implementation group: 'org.slf4j', name: 'jcl-over-slf4j', version: slf4jVer
	implementation group: 'org.slf4j', name: 'jul-to-slf4j', version: slf4jVer

	// Java Activation
	implementation group: 'javax.activation', name: 'activation', version: '1.1.1'
}

run {
	standardInput = System.in
}

/* convenience tasks */

tasks.register("createMissingSourceDirs") {
	group = "Directories"
	description = "Create all of the missing source directories for this project."
	doFirst {
		sourceSets.each { def sourceRoot ->
			sourceRoot.allSource.srcDirTrees.each { def sourceDir ->
				if(!sourceDir.dir.exists()) {
					println "Creating ${sourceDir}"
					mkdir sourceDir.dir
				}
			}
		}
	}
}

tasks.register("deleteEmptySourceDirs") {
	group = "Directories"
	description = "Delete all empty source directories."
	doFirst {
		sourceSets.each { def sourceRoot ->
			sourceRoot.allSource.srcDirTrees.each { def sourceDir ->
				if(sourceDir.dir.exists() && sourceDir.dir.isDirectory() && sourceDir.dir.list().length == 0) {
					println "Removing empty ${sourceDir}"
					sourceDir.dir.delete()
				}
			}
		}
	}
}

tasks.register("openProjectDir") {
	group = "Directories"
	description = "Open the project root in the system file manager."
	doFirst {
		println('Opening: ' + file(projectDir))
		java.awt.Desktop.getDesktop().open(file(projectDir));
	}
}

def gitIgnored="""
.gradle
.nb-gradle
.classpath
.project
build
bin
dist
*.zip
*.tgz
*.class
.DS_Store
"""

tasks.register("createGitIgnore") {
	group = "Git"
	description = "Create the project's .gitignore file."
	doLast {
		def file = new File(projectDir, ".gitignore")
		if ( !file.exists() ) {
			println('Creating .gitignore')
			file.text = gitIgnored
		} else {
			println('.gitignore already exists')
		}
	}
}
